// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  custom
}

enum Audinece {
  public
  friends
  custom
}

enum SuperAudinece {
  friendsExcept
  friendList
}

enum PostType {
  userpost
  grouppost
  pagepost
  usersharepost
  pagesharepost
  usersharetogrouppost
  pagesharetogrouppost
}

enum ShareType {
  userpost
  grouppost
  pagepost
}

enum ReactionType {
  like
  love
  sad
  angry
  care
  haha
  wow
}

model User {
  id                  String   @id @default(uuid())
  firstName           String
  lastName            String
  birthDate           DateTime
  gender              Gender
  customGender        String?
  customGenderPronoun String?
  email               String?  @unique
  phoneNumber         String?  @unique
  password            String

  verificationCode       Int?
  verificationExpiredAt  DateTime?
  isActive               Boolean                @default(false)
  activeAt               DateTime?
  friendsFromSent        Firends[]              @relation("sender")
  friendsFromRecieved    Firends[]              @relation("reciever")
  setFriendRequests      FriendRequest[]        @relation("friendrequestsender")
  recievedFriendRequests FriendRequest[]        @relation("friendrequestreciever")
  post                   UserPost[]
  taggedPosts            Tags[]
  fansOf                 Page[]
  memberOf               GroupMembers[]
  managedPages           Page[]                 @relation("managedpages")
  managedGroups          Group[]
  groupPosts             GroupPost[]
  sharedPosts            UserSharePost[]
  sharedPostsToGroup     UserShareToGroupPost[]
  sentMessages           Message[]              @relation("messagesender")
  recievedMessages       Message[]              @relation("messagereciever")
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  stories                UserStory[]

  commentsFromUserPost             UserPostComment[]
  commentsFromPagePost             PagePostComment[]
  commentsFromGroupPost            GroupPostComment[]
  commentsFromUserSharePost        UserSharePostComment[]
  commentsFromPageSharePost        PageSharePostComment[]
  commentsFromUserSharePostToGroup UserSharePostToGroupComment[]
  commentsFromPageSharePostToGroup PageSharePostToGroupComment[]

  repliesForUserPostComment      RepliesForUserPostComment[]
  repliesForPagePostComment      RepliesForPagePostComment[]
  repliesForGroupPostComment     RepliesForGroupPostComment[]
  repliesForUserSharePostComment RepliesForUserSharePostComment[]
  repliesForPageSharePostComment RepliesForPageSharePostComment[]
  repliesForUserSharePostToGroup RepliesForUserSharePostToGroupComment[]
  repliesForPageSharePostToGroup RepliesForPageSharePostToGroupComment[]

  ReactionsForUserPostComment             ReactionsForUserPostComment[]
  ReactionsForPagePostComment             ReactionsForPagePostComment[]
  ReactionsForGroupPostComment            ReactionsForGroupPostComment[]
  ReactionsForUserSharePostComment        ReactionsForUserSharePostComment[]
  ReactionsForPageSharePostComment        ReactionsForPageSharePostComment[]
  ReactionsForUserSharePostToGroupComment ReactionsForUserSharePostToGroupComment[]
  ReactionsForPageSharePostToGroupComment ReactionsForPageSharePostToGroupComment[]

  ReactionsForPageSharePostCommentReply        ReactionsForPageSharePostCommentReply[]
  ReactionsForUserSharePostCommentReply        ReactionsForUserSharePostCommentReply[]
  ReactionsForUserSharePostToGroupCommentReply ReactionsForUserSharePostToGroupCommentReply[]
  ReactionsForPageSharePostToGroupCommentReply ReactionsForPageSharePostToGroupCommentReply[]
  ReactionsForUserPostCommentReply             ReactionsForUserPostCommentReply[]
  ReactionsForPagePostCommentReply             ReactionsForPagePostCommentReply[]
  ReactionsForGroupPostCommentReply            ReactionsForGroupPostCommentReply[]
}

model Firends {
  id         String   @id @default(uuid())
  senderId   String
  recieverId String
  sender     User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reciever   User     @relation("reciever", fields: [recieverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FriendRequest {
  id         String   @id @default(uuid())
  sendId     String
  recieverId String
  sender     User     @relation("friendrequestsender", fields: [sendId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reciever   User     @relation("friendrequestreciever", fields: [recieverId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserPost {
  id                  String                 @id @default(uuid())
  postType            PostType               @default(userpost)
  userId              String
  user                User                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content             String
  medias              Medias[]
  tags                Tags[]
  location            String
  doing               String
  doingWhat           String
  audience            Audinece               @default(friends)
  sAudience           SuperAudinece?
  sharesByUser        UserSharePost[]
  sharesByPage        PageSharePost[]
  sharesByPageToGroup PageShareToGroupPost[]
  sharesByUserToGroup UserShareToGroupPost[]
  comments            UserPostComment[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
}

model Medias {
  id        String   @id @default(uuid())
  postId    String
  post      UserPost @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url       String
  type      String
  size      Int
  width     Int
  height    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessageMedias {
  id        String   @id @default(uuid())
  postId    String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url       String
  type      String
  size      Int
  width     Int
  height    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageMedias {
  id         String   @id @default(uuid())
  pagePostId String
  pagePost   PagePost @relation(fields: [pagePostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url        String
  type       String
  size       Int
  width      Int
  height     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model GroupMedias {
  id          String    @id @default(uuid())
  groupPostId String
  groupPost   GroupPost @relation(fields: [groupPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url         String
  type        String
  size        Int
  width       Int
  height      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tags {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      UserPost @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Page {
  id                 String                 @id @default(uuid())
  name               String
  category           String
  userId             String
  admin              User                   @relation("managedpages", fields: [userId], references: [id], onUpdate: Cascade)
  fans               User[]
  posts              PagePost[]
  sharedPosts        PageSharePost[]
  sharedPostsToGroup PageShareToGroupPost[]
  stories            PageStory[]
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model PagePost {
  id                  String                 @id @default(uuid())
  postType            PostType               @default(pagepost)
  pageId              String
  page                Page                   @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content             String
  medias              PageMedias[]
  location            String
  doing               String
  doingWhat           String
  audience            Audinece               @default(public)
  sharesByUser        UserSharePost[]
  sharesByPage        PageSharePost[]
  sharesByPageToGroup PageShareToGroupPost[]
  sharesByUserToGroup UserShareToGroupPost[]
  pagePostComments    PagePostComment[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
}

model GroupPost {
  id                  String                 @id @default(uuid())
  postType            PostType               @default(grouppost)
  userId              String
  groupId             String
  user                User                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group               Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content             String
  medias              GroupMedias[]
  location            String
  doing               String
  doingWhat           String
  audience            Audinece               @default(friends)
  sAudience           SuperAudinece?
  sharesByUser        UserSharePost[]
  sharesByPage        PageSharePost[]
  sharesByPageToGroup PageShareToGroupPost[]
  sharesByUserToGroup UserShareToGroupPost[]
  groupPostComments   GroupPostComment[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
}

model Group {
  id                           String                 @id @default(uuid())
  userId                       String
  admin                        User                   @relation(fields: [userId], references: [id], onUpdate: Cascade)
  name                         String
  category                     String
  members                      GroupMembers[]
  groupMembersId               String
  posts                        GroupPost[]
  sharedPostsToThisGroupByUser UserShareToGroupPost[]
  sharedPostsToThisGroupByPage PageShareToGroupPost[]
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
}

model GroupMembers {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSharePost {
  id                    String                 @id @default(uuid())
  postType              PostType               @default(usersharepost)
  shareType             ShareType
  content               String
  doing                 String
  doingWhat             String
  audience              Audinece               @default(friends)
  cAudience             SuperAudinece?
  userId                String
  location              String
  userPostId            String
  pagePostId            String
  groupPostId           String
  sharingType           String
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userPost              UserPost?              @relation(fields: [userPostId], references: [id])
  pagePost              PagePost?              @relation(fields: [pagePostId], references: [id])
  groupPost             GroupPost?             @relation(fields: [groupPostId], references: [id])
  userSharePostComments UserSharePostComment[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model PageSharePost {
  id        String    @id @default(uuid())
  postType  PostType  @default(pagesharepost)
  shareType ShareType

  content     String
  doing       String
  doingWhat   String
  audience    Audinece               @default(friends)
  cAudience   SuperAudinece?
  pageId      String
  location    String
  userPostId  String
  pagePostId  String
  groupPostId String
  sharingType String
  page        Page                   @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userPost    UserPost?              @relation(fields: [userPostId], references: [id])
  pagePost    PagePost?              @relation(fields: [pagePostId], references: [id])
  groupPost   GroupPost?             @relation(fields: [groupPostId], references: [id])
  comments    PageSharePostComment[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model PageShareToGroupPost {
  id        String    @id @default(uuid())
  postType  PostType  @default(pagesharetogrouppost)
  shareType ShareType

  content      String
  doing        String
  doingWhat    String
  audience     Audinece       @default(friends)
  cAudience    SuperAudinece?
  pageId       String
  location     String
  userPostId   String
  pagePostId   String
  groupPostId  String
  sharingType  String
  groupId      String
  page         Page           @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toWhichGroup Group          @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userPost  UserPost?                     @relation(fields: [userPostId], references: [id])
  pagePost  PagePost?                     @relation(fields: [pagePostId], references: [id])
  groupPost GroupPost?                    @relation(fields: [groupPostId], references: [id])
  comments  PageSharePostToGroupComment[]
  createdAt DateTime                      @default(now())
  updatedAt DateTime                      @updatedAt
}

model UserShareToGroupPost {
  id        String    @id @default(uuid())
  postType  PostType  @default(usersharetogrouppost)
  shareType ShareType

  content      String
  doing        String
  doingWhat    String
  audience     Audinece                      @default(friends)
  cAudience    SuperAudinece?
  userId       String
  groupId      String
  location     String
  userPostId   String
  pagePostId   String
  groupPostId  String
  sharingType  String
  sharer       User                          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toWhichGroup Group                         @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userPost     UserPost?                     @relation(fields: [userPostId], references: [id])
  pagePost     PagePost?                     @relation(fields: [pagePostId], references: [id])
  groupPost    GroupPost?                    @relation(fields: [groupPostId], references: [id])
  comments     UserSharePostToGroupComment[]
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
}

model Message {
  id            String          @id @default(uuid())
  senderId      String
  recieverId    String
  sender        User            @relation("messagesender", fields: [senderId], references: [id], onUpdate: Cascade)
  reciever      User            @relation("messagereciever", fields: [recieverId], references: [id], onUpdate: Cascade)
  seen          Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  MessageMedias MessageMedias[]
}

model UserStoryMedias {
  id          String    @id @default(uuid())
  userStoryId String
  story       UserStory @relation(fields: [userStoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type        String
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserStory {
  id        String            @id @default(uuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  medias    UserStoryMedias[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model PageStoryMedias {
  id          String    @id @default(uuid())
  type        String
  url         String
  pageStoryId String
  story       PageStory @relation(fields: [pageStoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PageStory {
  id        String            @id @default(uuid())
  pageId    String
  page      Page              @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  medias    PageStoryMedias[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model UserPostComment {
  id                          String                        @id @default(uuid())
  postId                      String
  userId                      String
  user                        User                          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post                        UserPost                      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl                    String
  content                     String
  replies                     RepliesForUserPostComment[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  ReactionsForUserPostComment ReactionsForUserPostComment[]

  ReactionsForUserPostCommentReply ReactionsForUserPostCommentReply[]
}

model PagePostComment {
  id                          String                        @id @default(uuid())
  postId                      String
  userId                      String
  user                        User                          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post                        PagePost                      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl                    String
  content                     String
  replies                     RepliesForPagePostComment[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  ReactionsForPagePostComment ReactionsForPagePostComment[]

  ReactionsForPagePostCommentReply ReactionsForPagePostCommentReply[]
}

model GroupPostComment {
  id                           String                         @id @default(uuid())
  postId                       String
  userId                       String
  user                         User                           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post                         GroupPost                      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl                     String
  content                      String
  replies                      RepliesForGroupPostComment[]
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  ReactionsForGroupPostComment ReactionsForGroupPostComment[]

  ReactionsForGroupPostCommentReply ReactionsForGroupPostCommentReply[]
}

model UserSharePostComment {
  id                               String                             @id @default(uuid())
  postId                           String
  userId                           String
  user                             User                               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post                             UserSharePost                      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl                         String
  content                          String
  replies                          RepliesForUserSharePostComment[]
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  ReactionsForUserSharePostComment ReactionsForUserSharePostComment[]

  ReactionsForUserSharePostCommentReply ReactionsForUserSharePostCommentReply[]
}

model PageSharePostComment {
  id                               String                             @id @default(uuid())
  postId                           String
  userId                           String
  user                             User                               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post                             PageSharePost                      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl                         String
  content                          String
  replies                          RepliesForPageSharePostComment[]
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  ReactionsForPageSharePostComment ReactionsForPageSharePostComment[]

  ReactionsForPageSharePostCommentReply ReactionsForPageSharePostCommentReply[]
}

model UserSharePostToGroupComment {
  id                                      String                                    @id @default(uuid())
  postId                                  String
  userId                                  String
  user                                    User                                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post                                    UserShareToGroupPost                      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl                                String
  content                                 String
  replies                                 RepliesForUserSharePostToGroupComment[]
  createdAt                               DateTime                                  @default(now())
  updatedAt                               DateTime                                  @updatedAt
  ReactionsForUserSharePostToGroupComment ReactionsForUserSharePostToGroupComment[]

  ReactionsForUserSharePostToGroupCommentReply ReactionsForUserSharePostToGroupCommentReply[]
}

model PageSharePostToGroupComment {
  id                                      String                                    @id @default(uuid())
  postId                                  String
  userId                                  String
  user                                    User                                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post                                    PageShareToGroupPost                      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl                                String
  content                                 String
  replies                                 RepliesForPageSharePostToGroupComment[]
  createdAt                               DateTime                                  @default(now())
  updatedAt                               DateTime                                  @updatedAt
  ReactionsForPageSharePostToGroupComment ReactionsForPageSharePostToGroupComment[]

  ReactionsForPageSharePostToGroupCommentReply ReactionsForPageSharePostToGroupCommentReply[]
}

/**
 * replies
 */

model RepliesForUserPostComment {
  id        String          @id @default(uuid())
  commentId String
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   UserPostComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model RepliesForPagePostComment {
  id        String          @id @default(uuid())
  commentId String
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   PagePostComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model RepliesForGroupPostComment {
  id        String           @id @default(uuid())
  commentId String
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   GroupPostComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model RepliesForUserSharePostComment {
  id        String               @id @default(uuid())
  commentId String
  userId    String
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   UserSharePostComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model RepliesForPageSharePostComment {
  id        String               @id @default(uuid())
  commentId String
  userId    String
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   PageSharePostComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model RepliesForUserSharePostToGroupComment {
  id        String                      @id @default(uuid())
  commentId String
  userId    String
  user      User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   UserSharePostToGroupComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
}

model RepliesForPageSharePostToGroupComment {
  id        String                      @id @default(uuid())
  commentId String
  userId    String
  user      User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   PageSharePostToGroupComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl  String
  content   String
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
}

/**
 * comment reactions *
 */

model ReactionsForUserPostComment {
  id           String          @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      UserPostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ReactionsForPagePostComment {
  id           String          @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      PagePostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ReactionsForGroupPostComment {
  id           String           @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      GroupPostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ReactionsForUserSharePostComment {
  id           String               @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      UserSharePostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ReactionsForPageSharePostComment {
  id           String               @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      PageSharePostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ReactionsForUserSharePostToGroupComment {
  id           String                      @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      UserSharePostToGroupComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
}

model ReactionsForPageSharePostToGroupComment {
  id           String                      @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      PageSharePostToGroupComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
}

/**
 * reply reactions
 */

model ReactionsForUserPostCommentReply {
  id           String          @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      UserPostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ReactionsForPagePostCommentReply {
  id           String          @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      PagePostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ReactionsForGroupPostCommentReply {
  id           String           @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      GroupPostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ReactionsForUserSharePostCommentReply {
  id           String               @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      UserSharePostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ReactionsForPageSharePostCommentReply {
  id           String               @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      PageSharePostComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ReactionsForUserSharePostToGroupCommentReply {
  id           String                      @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      UserSharePostToGroupComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
}

model ReactionsForPageSharePostToGroupCommentReply {
  id           String                      @id @default(uuid())
  replyId      String
  reactionType ReactionType
  userId       String
  user         User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment      PageSharePostToGroupComment @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaUrl     String
  content      String
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
}
